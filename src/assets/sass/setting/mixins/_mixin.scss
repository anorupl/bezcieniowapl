@mixin bpoint($point) {
   @if $point == phone {
     @media #{$mphone} { @content ; }
  }
  @else if $point == tablet {
     @media #{$mtablet} { @content ; }
  }  
    @else if $point == desktop {
     @media #{$mdesktop} { @content ; }
  }   
   @else if $point == hd-desktop {
     @media #{$mhd-desktop} { @content ; }
  }    
}






@mixin icon($name, $content, $size: 1.4, $tlo:'') {
  .icon-#{$name}:before {
    content: unquote("\"")+unquote(str-insert($content,"\\", 1))+unquote("\"");
	font-size: (10*$size) + px;
    font-size: $size+rem;

    @if $tlo != '' {
    	background: $tlo;
    }
    @content;
  }

}

@mixin sample( $height: '', $bg:'') {

    @if $height != '' {
    	//min-height: 40px;
    }
    @if $bg != '' {
    	//background: hsla(random(365), 90, 50, 1);
    }

}



@mixin icon-ie7($name, $content, $size: 1.4) {

	$var: "&#x";

	.icon-#{$name} {
  		*zoom: expression(this.runtimeStyle['zoom'] = '1', this.innerHTML = '#{$var}#{$content}');
    	@content;
  	}
	.icon-#{$name} > span {
		font-size: (10*$size) + px;
	}
}





@mixin font-size($size, $plus: 0, $line:'false') {
	font-size: (10*$size) + px;
    font-size: $size+rem;

    @if $line != 'false' {
        @if $plus > 0 {



        line-height: ((10*($size+$plus))+5) + px;
        line-height: (($size+$plus)+0.5)+rem;
        }
        @else {
                  line-height: ((10*$size)+5) + px;
                    line-height: ($size+0.5)+rem;
        }


}
}



@mixin font-size-procent($size) {
    
    font-size: (($size*100)/$size-base)#{'%'};
    line-height: (($size*80)/$size-base)#{'%'};

}



// Mixin Breakpoint
@mixin point-min($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);

        @media screen and (min-width: $value) {
            @content;
        }
    }

    @warn "Unknown `#{$breakpoint}` in $breakpoints";
}
@mixin point-max($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);

        @media screen and (max-width: $value) {
            @content;
        }
    }

    @warn "Unknown `#{$breakpoint}` in $breakpoints";
}
@mixin bg-op($color, $opacity: 0.8) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}

/////////////////////// compass

// ----
// Sass (v3.4.7)
// Compass (v1.0.1)
// ----

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}








